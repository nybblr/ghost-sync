#!/usr/bin/env ruby

require 'pry'

require 'active_support'
require 'active_support/core_ext'
require 'faraday'
# require 'oauth2'
require 'json'
require 'yaml'

token = ENV['OAUTH_TOKEN']

action = ARGV[0]

default_config_path = File.expand_path(File.join(__FILE__, '../../ghosync.yml'))
defaults = YAML.load_file(default_config_path)

config_path = File.expand_path('ghosync.yml')
config = YAML.load_file(config_path)

options = defaults.deep_merge(config)

dir = options['path']
site = options['site']
format = options['format']

# client_id = ''
# client_secret = ''
# client = OAuth2::Client.new(client_id, client_secret, site: site)
#
# client.auth_code.authorize_url(redirect_uri: 'http://localhost:8080/oauth2/callback')
# # => "https://example.org/oauth/authorization?response_type=code&client_id=client_id&redirect_uri=http://localhost:8080/oauth2/callback"
#
# token = client.auth_code.get_token('authorization_code_value', :redirect_uri => 'http://localhost:8080/oauth2/callback', :headers => {'Authorization' => 'Basic some_password'})
# response = token.get('/api/resource', :params => { 'query_foo' => 'bar' })
# response.class.name
# # => OAuth2::Response

conn = Faraday.new(url: site)

response = conn.get '/ghost/api/v0.1/posts/' do |request|
  request.headers['Authorization'] = "Bearer #{token}"
  request.params['include'] = 'tags,author'
  request.params['formats'] = 'mobiledoc'
  request.params['status'] = 'all'
  request.params['limit'] = 1000
end

payload = JSON.parse(response.body)

posts = payload.fetch("posts", [])

divider = "---\n\n"

def markdown_to_mobiledoc(md)
  JSON.generate(
    {version:"0.3.1",markups:[],atoms:[],cards:[["card-markdown",{cardName:"card-markdown",markdown:md}]],sections:[[10,0]]}
  )
end

def mobiledoc_to_markdown(md)
  JSON.parse(md)["cards"][0][1]["markdown"]
end

files = posts.map do |post|
  date = nil
  if (date_string = post['published_at']).present?
    date = Time.parse(date_string)
  end
  slug = post['slug']
  id = post['id']

  hash = {
    'title' => post['title'],
    'slug' => slug,
    'date' => date,
    'author' => post['author']['name'],
    'tags' => post['tags'].map {|tag| tag['name'] },
    'published' => post['status'] == 'published',
    'excerpt' => post['custom_excerpt'],
    'meta' => {
      'title' => post['meta_title'],
      'description' => post['meta_description']
    }
  }

  frontmatter = YAML.dump(hash)
    .gsub('.000000000', '') # Hack off milliseconds

  content = frontmatter + divider + mobiledoc_to_markdown(post['mobiledoc'])
  name = "#{slug}.md"

  [id, name, content, hash]
end

def parse_liquid(string)
  yaml_regex = /\A(---\s*\n.*?\n?)^((---|\.\.\.)\s*$\n?)/m
  match = yaml_regex.match(string)
  hash = YAML.load(match[1], safe: true)
  md = match.post_match
  [hash, md]
end

def upload_hash(format, *args)
  send("#{format}_upload_hash", *args)
end

def middleman_upload_hash(( hash, md ), slug)
  {'posts' => [{
    'title' => hash['title'],
    'slug' => slug,
    'published_at' => hash['date'].iso8601,
    'tags' => (hash['tags'] || "").split(/,\s*/).map {|t| { 'name' => t } },
    'status' => hash['published'] == false ? 'draft' : 'published',
    'meta_title' => nil,
    'meta_description' => nil,
    'mobiledoc' => markdown_to_mobiledoc(md)
  }]}
end

def common_upload_hash(( hash, md ), *args)
  meta = hash.fetch('meta', {})

  {'posts' => [{
    'title' => hash['title'],
    'slug' => hash['slug'],
    'published_at' => hash['date'].iso8601,
    'tags' => (hash['tags'] || []).map {|t| { 'name' => t } },
    'status' => hash['published'] ? 'published' : 'draft',
    'custom_excerpt' => hash['excerpt'],
    'meta_title' => meta['title'],
    'meta_description' => meta['description'],
    'mobiledoc' => markdown_to_mobiledoc(md)
  }]}
end

# Persist files to disk
if action == 'pull'
  files.each do |(_, name, content, _)|
    File.write(File.join(dir, name), content)
  end
end

# Upload files from disk
if action == 'push'
  local = Dir[File.join(dir, '*.md')].map do |f|
    slug = File.basename(f, '.md')

    file = files.detect {|f| f[3]['slug'] == slug }
    id = (file || [])[0]

    content = File.read(f)

    parse = parse_liquid(content)
    hash = upload_hash(format, parse, slug)

    [id, hash]
  end

  local.each do |(id, hash)|
    path = id ? "posts/#{id}" : 'posts'
    method = id ? :put : :post

    puts "#{method} to #{hash['posts'][0]['slug']}"

    req = nil

    response = conn
        .run_request(method, "/ghost/api/v0.1/#{path}", hash.to_json, nil) do |request|
      request.headers['Authorization'] = "Bearer #{token}"
      request.headers['Content-Type'] = 'application/json'
      req = request
    end

    status = response.status

    if status < 200 || status >= 300
      puts "#{status}: #{response.body}"
    end
  end
end
